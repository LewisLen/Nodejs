#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('express-mongodb:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3030');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * 新增一个聊天室的功能，主要是利用socket.io 客户端则是socket.io-client
 */
const io = require('socket.io')(server, { cors: true }); // cors可加可不加
const {getNowDate} = require('../utils/utils')
io.on("connect", (serverSocket) => {
  serverSocket.emit("hello", "欢迎来到随心聊天室");
});

io.on("connection", (serverSocket) => {
  serverSocket.on("client-send-msg", (msg) => {
    console.log(msg);
      io.emit("serve-send-msg", {
        user: '网友',
        msg,
        msgDate: getNowDate()
      });
    });
});





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(bind)
  debug('Listening on ' + bind);
}

module.exports = server